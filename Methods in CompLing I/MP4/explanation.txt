Part 1

First step was to clean the data.  The function opens up two files:  one with the data, and an empty one.  The for-loop reads the file with data by the line.  If a line is empty, it skips it, and if it contains data, it writes it to an empty file ('wordlist.txt').  The resulting 'wordlist.txt' contains no empty lines and is stored in the variable 'path'.  Thus prepared file is then open as read-only and read.  Since the file is relatively small, I used the '.readlines' method.  For a larger file, I would have used a generator.  The resulting list of strings is stored in the variable 'lines'.  

Next, I created a compiler object, and stored in the 'double_letter_word' variable.  The object contains the following regex:  /r'\w*(\w)\1\w*'/.  The /r'/ ignores all escape sequences, /\w*/ indicates 0 or more instances of a letter, /(\w)\1/ exactly one repeated instance of a letter.  The literal will match any string of letters containing a repeated letter anywhere within the string.  The compiler is followed by a counter.  

The final for-loop iterates over the list of strings stored in the 'lines', searching for items that correspond to the regex.  The '.search' method is preferred over the '.match' method as the latter succeeds only if the pattern matches at the start of the string.  If a match is found, it is stored in the 'match' variable and appended to the 'double_letter_list' counter.  The latter is then printed.  


Part 2

The script opens by defining two global variables 'corpus' and 'corpus2'.  The former is the string provided in the spec, and the latter is the string that should be generated by the script; both are needed for the assertion test.

The 'exercise2' function contains 4 lines of instructions.  The first one searches the 'corpus' for expressions corresponding to /\d{3}-\d{4}/, which matches any string comprised of {3} digits, followed by a dash, followed by {4} digits.  Once a matching string is found, it is replaced with a '000-0000'.  Thus modified data is stored in 'corpus1'.  The above is repeated 3 more times, addressing the different phone number formats, which each substitution overwriting the corpus1 variable.  The final iteration of the 'corpus1' variable is then printed and returned, ending the script.  

The test function checks if the string obtained as a result of running exercise2 (corpus1) is the same as the corpus2 global variable.  In this case, the assertion returns no errors, meaning that the two strings are the same.
 