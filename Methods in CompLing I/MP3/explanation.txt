Part 1

	Having defined the class 'Rectangle', I initialized it to take the vector values of the two diagonal corners of a rectangle (x0, x1) and (y0, y1), as well as the values of a point (x, y) whose location is to be verified.  I then defined the method 'area' that calculates the area of the rectangle as a product of its two perpendicular sides, where each side is the distance between two points on the plane.  The next step was to define a method that checks whether a point with coordinates (x, y) is located within or outside said rectangle.  I did this with a condition that strings together a number of comparisons.  If the coordinates of said point meet these comparisons, then the point is within the rectangle.  Otherwise, the point falls outside the rectangle.  
	Having defined the 'Rectangle' class, I defined the function 'main' that instantiates the class, passing user-defined values of the required coordinates.  The function also prints the area of the rectangle and states whether the point with user-defined coordinates (x, y) lies within the rectangle or outside of it.  For the purpose of this exercise, every point that is on the perimeter of the rectangle is also in the rectangle.  Calling 'main' generates the area of the rectangle and states if the point is outside or inside of it.
	This solution works only for rectangles, whose coordinates are all positive integers.  If any of the corners of the rectangle fall outside of the first quadrant (counting clockwise), the formula doesn't check out.  I've looked for a solution to this problem and found out that one can take the point (x, y) = X and calculate the areas of four triangles with bases in each of the sides of the rectangle ABCD.  If the sum of the four areas i.e. ABX + BCX + CDX + DAX is greater than the area of ABCD, then X is outside of the rectangle.  Otherwise, it's within it.  I could not figure out the way to code this.
	I also wasn't sure how to write assertion statements for this.  I will try to find that out in Jon's office hours on 11/18.



Part 2

	I found this problem difficult and very time consuming.  Part of the reason for that had to do with me trying to solve it similarly to how we worked on a comparable problem in in the practicum.  The challenges I ran into had to do with how the text was formatted and pointed out to me the importance of data formatting.  The first step was to define the class 'Employee', and instantiate an object that takes three arguments: 'name', 'title', and 'employee_id', the first two being strings and the last one an integer.  The values passed through these arguments will then be stored in the corresponding variables.  
	After importing the iterator object from the typing module, I defined a function 'read_employees' taking a file path as its argument and producing an iterator.  The function is not part of the 'Employee' class, i.e. it's not a method.  This function does a few things.  First, it opens the file whose location is stored in the variable 'path'.  Since we don't need to write to the file, we'll open it as read-only.  To read the contents of the file I used the example from the lecture employing a while-loop.  The 'True' condition will always be true, causing the function to iterate over the file until we specifically break out of it.  That way, we can iterate over files of any length.  The function reads the first line and stores it in the variable 'name'.  It also removes any empty lines following the text and replaces them with spaces.  Then it moves to the next line.  If iterating over the next line returns an empty string, the function breaks.  This condition will cause the iterator to stop at the end of the file.  If the next line contains a string, it will be stored in the variable 'title'.  The data from the third line is stored in 'employee_id'.  Since the fourth line is empty, the program reads it but doesn't store anything.  Having iterated over four lines, the script yields an instance of the 'Employee' and passes the three variables corresponding to three lines of text.  I first used a return statement here, but python was unhappy with it.  Replacing it with 'yield' did the job.
	Lastly, I defined the function 'main', which specifies the path for the file to be iterated over and stores the outcome of that iteration in the variable 'employees'.  For this to work the file needs to be in the same directory as the script file.  A for-loop iterates over the contents stored in the 'employees' variable and prints them in a template.  The last line calls the function 'main'.
	Similarly to the first part of the problem, I didn't know how to write assertions for this script, but will try to look into it in the upcoming office hours.





